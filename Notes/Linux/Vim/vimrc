"vundle
set nocompatible
filetype off
filetype plugin on

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
"git interface
Plugin 'tpope/vim-fugitive'
"filesystem
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'kien/ctrlp.vim' 

"html
"  isnowfy only compatible with python not python3
Plugin 'isnowfy/python-vim-instant-markdown'
Plugin 'jtratner/vim-flavored-markdown'
Plugin 'suan/vim-instant-markdown'
Plugin 'nelstrom/vim-markdown-preview'
"python sytax checker
Plugin 'nvie/vim-flake8'
Plugin 'vim-scripts/Pydiction'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'scrooloose/syntastic'

"auto-completion stuff
Plugin 'klen/python-mode'
Plugin 'Raimondi/delimitMate'
Plugin 'Valloric/YouCompleteMe'
Plugin 'klen/rope-vim'
"Plugin 'davidhalter/jedi-vim'
Plugin 'ervandew/supertab'
""code folding
"Plugin 'tmhedberg/SimpylFold'

"Colors!!!
Plugin 'altercation/vim-colors-solarized'
Plugin 'jnurmine/Zenburn'
Plugin 'dracula/vim'
Plugin 'tyrannicaltoucan/vim-deep-space'

" codi.vim
" The interactive scratchpad for hackers
" This is very cool plugin
Plugin 'metakirby5/codi.vim'

" Vim for Dockerfile
Plugin 'ekalinin/Dockerfile.vim'

" Line style
" Plugin'liuchengxu/eleline.vim'

call vundle#end()

" powerline
set rtp+=/usr/local/lib/python2.7/dist-packages/powerline/bindings/vim
set nocompatible
set t_Co=256
let g:minBufExplForceSyntaxEnable = 1
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup

set laststatus=2
" set guifont=Source\ Code\ Pro\ for\ Powerline:h12
set noshowmode


filetype plugin indent on    " enables filetype detection
let g:SimpylFold_docstring_preview = 1

"autocomplete
let g:ycm_autoclose_preview_window_after_completion=1

"custom keys
let mapleader=" "
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
"
call togglebg#map("<F5>")
colorscheme space-vim-dark
set t_Co=256
"set guifont=YaHeiConsolas:h11

let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

"I don't like swap files
set noswapfile

"turn on numbering
set nu

python with virtualenv support
py << EOF
import os.path
import sys
import vim
if 'VIRTUA_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  sys.path.insert(0, project_base_dir)
  activate_this = os.path.join(project_base_dir,'bin/activate_this.py')
  #  execfile(activate_this, dict(__file__=activate_this))../
  execfile(activate_this, dict(__file__=activate_this))
EOF

"it would be nice to set tag files by the active virtualenv here
":set tags=~/mytags "tags for ctags and taglist
"omnicomplete
autocmd FileType python set omnifunc=pythoncomplete#Complete

"------------Start Python PEP 8 stuff----------------
" Number of spaces that a pre-existing tab is equal to.
au BufRead,BufNewFile *py,*pyw,*.c,*.h set tabstop=4

"spaces for indents
au BufRead,BufNewFile *.py,*pyw set shiftwidth=4
au BufRead,BufNewFile *.py,*.pyw set expandtab
au BufRead,BufNewFile *.py set softtabstop=4

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red

" Display tabs at the beginning of a line in Python mode as bad.
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
" Make trailing whitespace be flagged as bad.
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Wrap text after a certain number of characters
au BufRead,BufNewFile *.py,*.pyw, set textwidth=100

" Use UNIX (\n) line endings.
au BufNewFile *.py,*.pyw,*.c,*.h set fileformat=unix

" Set the default file encoding to UTF-8:
set encoding=utf-8
set fenc=utf-8
set fencs=utf-8,gbk,gb18030,gb2312,cp936,usc-bom,euc-jp

" For full syntax highlighting:
let python_highlight_all=1
syntax on
syntax enable

" Keep indentation level from previous line:
autocmd FileType python set autoindent

" make backspaces more powerfull
set backspace=indent,eol,start


"Folding based on indentation:
"autocmd FileType python set foldmethod=indent
"use space to open folds
"nnoremap <space> za 
"----------Stop python PEP 8 stuff--------------

"js stuff"
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2

"haskell,puppet,ruby,yml stuff"
autocmd FileType haskell,puppet,ruby,yml setlocal expandtab shiftwidth=2 softtabstop=2

" system clipboard
set clipboard=unnamed


" NERDTree config
map <F2> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif

" If you copy the code,it will make the code retain the original indentation
" 如果你复制代码时，它将使代码保持原始缩进
set pastetoggle=<F3>



""""""""""""""""""""""""""""""""""""""
"Quickly Run
"""""""""""""""""""""""""""""""""""""
map <F10> :call CompileRunGcc()<CR>
fun! CompileRunGcc()
	exec "w"
if &filetype == 'C'
	exec "!g++ % -o %<"
	exec "!time ./%<"
elseif &filetype == 'cpp'
	exec "!g++ %  -o %<"
	exec "!time ./%<"
elseif &filetype == 'java'
	exec "!java %"
	exec "!time java %<"
elseif &filetype == 'sh'
	:!time bash %
elseif &filetype == 'python'
	exec "!time python %"
elseif &filetype == 'go'
"	exec "!go build %<"
	exec "!time go run %"
elseif &filetype == 'mkd'
	exec "!~/.vim/markdown.pl % > %.html &"
	exec "!chromium %.html &"
endif
endfunc





" 透明
"hi Normal ctermbg=None



" for python docstring
" Raimondi/delimitMate config
au FileType python let b:delimitMate_nesting_quotes = ['"']
" 关闭某些类型文件的自动补全
" au FileType mail let b:delimitMate_autoclose = 0


" python-mode config
let g:pymode_intent = 1 "使用缩进风格为pep8
let g:pymode_folding = 0 "关闭代码折叠功能


if has("autocmd")  " 打开时光标放在上次退出时的位置
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    	\    exe "normal g'\"" |
    	\ endif
endif


set smartcase 	" 搜索时，智能大小写
set ignorecase 	" 搜索时，忽略大小写
set incsearch 	" incremental search
set autochdir 	" 打开文件时，自动 cd 到文件所在目录


" function! Buf_total_num()
"     return len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))
" endfunction
" function! File_size(f)
"     let l:size = getfsize(expand(a:f))
"     if l:size == 0 || l:size == -1 || l:size == -2
"         return ''
"     endif
"     if l:size < 1024
"         return l:size.' bytes'
"     elseif l:size < 1024*1024
"         return printf('%.1f', l:size/1024.0).'k'
"     elseif l:size < 1024*1024*1024
"         return printf('%.1f', l:size/1024.0/1024.0) . 'm'
"     else
"         return printf('%.1f', l:size/1024.0/1024.0/1024.0) . 'g'
"     endif
" endfunction
" set statusline=%<%1*[B-%n]%*
" " TOT is an abbreviation for total
" set statusline+=%2*[TOT:%{Buf_total_num()}]%*
" set statusline+=%3*\ %{File_size(@%)}\ %*
" set statusline+=%4*\ %F\ %*
" set statusline+=%5*『\ %{exists('g:loaded_ale')?ALEGetStatusLine():''}』%{exists('g:loaded_fugitive')?fugitive#statusline():''}%*
" set statusline+=%6*\ %m%r%y\ %*
" set statusline+=%=%7*\ %{&ff}\ \|\ %{\"\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"\ \|\"}\ %-14.(%l:%c%V%)%*
" set statusline+=%8*\ %P\ %*
" " default bg for statusline is 236 in space-vim-dark
" hi User1 cterm=bold ctermfg=232 ctermbg=179
" hi User2 cterm=None ctermfg=214 ctermbg=242
" hi User3 cterm=None ctermfg=251 ctermbg=240
" hi User4 cterm=bold ctermfg=169 ctermbg=239
" hi User5 cterm=None ctermfg=208 ctermbg=238
" hi User6 cterm=None ctermfg=246 ctermbg=237
" hi User7 cterm=None ctermfg=250 ctermbg=238
" hi User8 cterm=None ctermfg=249 ctermbg=240
" 
" set statusline+=%4*\ %F\ %* 
" hi User4 cterm=bold ctermfg=169 ctermbg=239
