" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif


" line number
set number

" encoding
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,big5,latin-1

" highlight
syntax on
syntax enable

" search
set hlsearch "搜索高亮
set incsearch "搜索加强
set ignorecase "搜索忽略大小写

" 基本配置
"set transparency=11 "透明度
"set background=white
set autoindent "自动缩进
set smartindent "智能缩进
set softtabstop=4 "缩进长度
set shiftwidth=4 "缩进长度
set showmatch "自动匹配
set ruler "在右下角显示当前行信息
filetype on "检查文件类型
filetype indent on "针对不同的文件类型采用不同的缩进格式
filetype plugin on "允许插件
filetype plugin indent on "启动自动补全
set wildmenu "vim 自身命令行模式智能补全
set showmode "左下角显示当前vim 模式
set showmatch "括号配对情况，跳转并高亮下一匹配的括号
set noswapfile
autocmd BufWritePost $MYVIMRC source $MYVIMRC

" vimrc文件修改后自动加载，linux
"autocmd! bufwritepost .vimrc source %

" 让 Vim 的补全菜单行为域一般IDE一致(参考Vimip1228)
set completeopt=longest,menu

" 复制选中区到系统剪贴板中
vnoremap <leader>y "+y

" 保存python文件时删除多余空格
fun! <SID>StripTrailingWhitespaces()
    let 1 = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(1, c)
endfun
autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

"PEP8
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

" 定义函数AutoSetFileHead, 自动插入文件头
autocmd BufNewFile *.sh,*.py exec ":call AutoSetFileHead()"
function! AutoSetFileHead()
    " 如果文件类型为 .sh文件
    if &filetype == 'sh'
	call setline(1, "\#!/bin/bash")
    endif

    " 如果文件类型为 python
    if &filetype == 'python'
	call setline(1, "\#!/usr/bin/env python")
	call append(1, "\# encoding: utf-8")
    endif

    normal G
    normal o
    normal o
endfunc


" markdown 配置
au BufRead,BufNewFile *.{md,mdown,mkd,mkdn,markdown,mdwn} set filetype=mkd
au BufRead,BufNewFile *.{go} set filetype=go
au BufRead,BufNewFile *.{js} set filetype=javascript
"rkdown to HTML
nmap md :!~/.vim/markdown.pl % > %.html <CR><CR>
nmap fi :!firefox %.html & <CR><CR>
nmap \ \cc
vmap \ \cc

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red

" 标识不必要的空白符
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" vim 竖列对齐线
"let g:indent_guides_enable_on_vim_startup=1
"let g:indent_guides_start_level=2
"let g:indent_guides_guide_size=1
"let g:indent_guides_auto_colors=0
"hi IndentGuidesOdd  ctermbg=black
"hi IndentGuidesEven ctermbg=darkgrey
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red	ctermbg=3
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green	ctermbg=4


" Vundle 环境配置
set nocompatible
"filetype off
" 设置包括vundle和初始化相关的 runtime path
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'suan/vim-instant-markdown'
"Plugin 'altercation/vim-colors-solarized'
"Plugin 'tomasr/molokai'
"Plugin 'Lokaltog/vim-powerline'
call vundle#end()


" 设置状态栏主题风格
"let g:Powerline_colorscheme='solarized256'




"indent color
"hi 4spa guibg = #771144
"hi 8spa guibg = #22464A
"hi 12spa guibg = #344333
"hi 16spa guibg = #777444
"hi 20spa guibg = #555777
"hi 24spa guibg = #cc9966
"hi 80spa guibg = #ff1111

"style 1
"syn match 4spa /\(\s\{4}\|\n\)\&\%1v.*\%2v/
"syn match 8spa /\s\{4}\&\%5v.*\%6v/
"syn match 12spa /\s\{4}\&\%9v.*\%10v/
"syn match 16spa /\s\{4}\&\%13v.*\%14v/
"syn match 20spa /\s\{4}\&\%17v.*\%18v/
"syn match 24spa /\s\{4}\&\%21v.*\%22v/

"style 2
"syn match 4spa /\(\s\|\n\)\&\%4v.*\%5v/
"syn match 8spa /\s\&\%8v.*\%9v/
"syn match 12spa /\s\&\%12v.*\%13v/
"syn match 16spa /\s\&\%16v.*\%17v/
"syn match 20spa /\s\&\%20v.*\%21v/
"syn match 24spa /\s\&\%24v.*\%25v/
"syn match 80spa /.\&\%80v.*\%81v/


"set list
"set lcs=tab:\|\ ,nbsp:%,trail:-
"hi LeaderTab guifg=#666666
"match LeaderTab /^\t/
